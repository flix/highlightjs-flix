/*! `flix` grammar compiled for Highlight.js 11.11.1 */
var hljsGrammar=(()=>{"use strict";return e=>{const t={scope:"number",
begin:e.C_NUMBER_RE+"(f(32|64)|i(8|16|32|64)|ii)?",relevance:0},n={
scope:"string",begin:'"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE,{
scope:"subst",begin:/(\$|\%)\{/,end:/\}/}]},r={scope:"title",
begin:/[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
relevance:0},a={scope:"title.class",beginKeywords:"class enum",
end:/[:={\[\n;\(]/,excludeEnd:!0,
contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,r]},i={
scope:"title.function",beginKeywords:"def",end:/[(\[]/,excludeEnd:!0,
contains:[r]},s={scope:"literal",variants:[{begin:/\?\?\?/},{begin:/\?/,
contains:[r]}]};return{name:"Flix",keywords:{$pattern:e.IDENT_RE+"!?",
keyword:["alias","as","case","catch","checked_cast","checked_ecast","default","def","eff","else","enum","for","forA","forM","force","foreach","from","handler","if","import","inject","inline","instance","into","law","lawful","lazy","let","match","mod","new","object","par","project","pub","query","redef","region","resume","run","sealed","select","solve","struct","throw","trait","try","type","typematch","unchecked_cast","unchecked_ecast","unsafe","use","where","with","without","yield"],
literal:["()","true","false","Nil","Some","None","LessThan","EqualTo","GreaterThan","Ok","Err","null","static"],
type:["Unit","Bool","Char","Float32","Float64","Int8","Int16","Int32","Int64","String","BigInt"],
built_in:["dbg","dbg!","dbg!!","IO","ef","ef1","ef2","Read","Write","Channel","Eq","PartialOrder","Order","Cmp","List","Map","Set","RedBlackTree","Result","Array","ToString","toString","flip","on","identity","fst","snd","swap",">>","|>","||>","!>","print","println","bug!","unreachable!","and","or","not","ref","deref"]
},contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,n,t,i,a,{scope:"meta",
begin:"@[A-Za-z]+"},s]}}})();export default hljsGrammar;